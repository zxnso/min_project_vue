{"remainingRequest":"E:\\learn\\learn_work_spaces\\minproject\\node_modules\\babel-loader\\lib\\index.js!E:\\learn\\learn_work_spaces\\minproject\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\learn\\learn_work_spaces\\minproject\\src\\utils\\validate.js","dependencies":[{"path":"E:\\learn\\learn_work_spaces\\minproject\\src\\utils\\validate.js","mtime":1599391174000},{"path":"E:\\learn\\learn_work_spaces\\minproject\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\learn\\learn_work_spaces\\minproject\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\learn\\learn_work_spaces\\minproject\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbSI7CgovKioKICogQ3JlYXRlZCBieSBQYW5KaWFDaGVuIG9uIDE2LzExLzE4LgogKi8KCi8qKgogKiBAcGFyYW0ge3N0cmluZ30gcGF0aAogKiBAcmV0dXJucyB7Qm9vbGVhbn0KICovCmV4cG9ydCBmdW5jdGlvbiBpc0V4dGVybmFsKHBhdGgpIHsKICByZXR1cm4gL14oaHR0cHM/OnxtYWlsdG86fHRlbDopLy50ZXN0KHBhdGgpOwp9Ci8qKgogKiBAcGFyYW0ge3N0cmluZ30gc3RyCiAqIEByZXR1cm5zIHtCb29sZWFufQogKi8KCmV4cG9ydCBmdW5jdGlvbiB2YWxpZFVzZXJuYW1lKHN0cikgewogIHZhciB2YWxpZF9tYXAgPSBbJ2FkbWluJywgJ2VkaXRvciddOwogIHJldHVybiB2YWxpZF9tYXAuaW5kZXhPZihzdHIudHJpbSgpKSA+PSAwOwp9"},{"version":3,"sources":["E:/learn/learn_work_spaces/minproject/src/utils/validate.js"],"names":["isExternal","path","test","validUsername","str","valid_map","indexOf","trim"],"mappings":";;;AAAA;;;;AAIA;;;;AAIA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,SAAO,0BAA0BC,IAA1B,CAA+BD,IAA/B,CAAP;AACD;AAED;;;;;AAIA,OAAO,SAASE,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,MAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,QAAV,CAAlB;AACA,SAAOA,SAAS,CAACC,OAAV,CAAkBF,GAAG,CAACG,IAAJ,EAAlB,KAAiC,CAAxC;AACD","sourcesContent":["/**\n * Created by PanJiaChen on 16/11/18.\n */\n\n/**\n * @param {string} path\n * @returns {Boolean}\n */\nexport function isExternal(path) {\n  return /^(https?:|mailto:|tel:)/.test(path)\n}\n\n/**\n * @param {string} str\n * @returns {Boolean}\n */\nexport function validUsername(str) {\n  const valid_map = ['admin', 'editor']\n  return valid_map.indexOf(str.trim()) >= 0\n}\n"]}]}